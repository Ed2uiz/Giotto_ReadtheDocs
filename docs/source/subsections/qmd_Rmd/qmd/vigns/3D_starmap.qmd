---
title: "3D Starmap"
format: rst
date: 04-14-2023
number-sections: true
prefer-html: true
---

## Dataset explanation
`Wang et al. <https://rubd.github.io/Giotto_site/articles/mouse_starmap_cortex_200917.html>`__ created a 3D spatial expression dataset consisting of 28 genes from 32,845 single cells in a visual cortex volume using the STARmap technology.

The STARmap data to run this tutorial can be found `here. <https://github.com/RubD/spatial-datasets/tree/master/data/2018_starmap_3D_cortex>`__ Alternatively you can use the **getSpatialDataset** to automatically download this dataset like we do in this example.

## Start Giotto
```{r eval=TRUE, message=FALSE}
# Ensure Giotto Suite is installed
if(!"Giotto" %in% installed.packages()) {
  devtools::install_github("drieslab/Giotto@suite")
}
library(Giotto)

# Ensure Giotto Data is installed
if(!"GiottoData" %in% installed.packages()) {
  devtools::install_github("drieslab/GiottoData")
}
library(GiottoData)

# Ensure the Python environment for Giotto has been installed
genv_exists = checkGiottoEnvironment()
if(!genv_exists){
  # The following command need only be run once to install the Giotto environment
  installGiottoEnvironment()
}

## Create instructions
instrs = createGiottoInstructions(save_dir = getwd(),
                                  save_plot = TRUE,
                                  show_plot = TRUE,
                                  return_plot = FALSE)
```

## Create a Giotto object
```{r eval=TRUE}
## provide path to 3D starmap folder
data_path = system.file('/Mini_datasets/3D_starmap', package = 'GiottoData')

## 0.1 path to expression matrix ####
# --------------------------- #
expr_path = paste0(data_path, '/', 'starmap_expr.txt.gz')

## 0.2 path to spot locations ####
# -------------------------------------- #
locations_path = paste0(data_path, '/', 'starmap_cell_loc.txt')

# 1. Create Giotto object ####
# ---------------------------------- #
mini_starmap <- createGiottoObject(expression = expr_path,
                                  spatial_locs = locations_path,
                                  instructions = instrs)

showGiottoSpatLocs(mini_starmap)
showGiottoExpression(mini_starmap)
```

## Processing
```{r eval=TRUE}
filterDistributions(mini_starmap, detection = 'feats',
                    save_param = list(save_name = '2_a_filtergenes'))

filterDistributions(mini_starmap, detection = 'cells',
                    save_param = list(save_name = '2_b_filtercells'))

filterCombinations(mini_starmap,
                   expression_thresholds = c(1),
                   feat_det_in_min_cells = c(50, 100, 200),
                   min_det_feats_per_cell = c(20, 28, 28),
                   save_param = list(save_name = '2_c_filtercombos'))

# Filtering and normalization
mini_starmap <- filterGiotto(gobject = mini_starmap,
                           expression_threshold = 1,
                           feat_det_in_min_cells = 50,
                           min_det_feats_per_cell = 20,
                           expression_values = c('raw'),
                           verbose = T)
mini_starmap <- normalizeGiotto(gobject = mini_starmap,
                                scalefactor = 6000, verbose = T)
mini_starmap <- addStatistics(gobject = mini_starmap) 
```

## Dimension Reduction
```{r eval=TRUE}
# mini_starmap <- calculateHVF(gobject = mini_starmap)

mini_starmap <- runPCA(gobject = mini_starmap, method = 'factominer')
screePlot(mini_starmap, ncp = 30, 
          save_param = list(save_name = '3_a_screeplot'))

plotPCA(gobject = mini_starmap,
        save_param = list(save_name = '3_b_PCA'))

# 2D umap
mini_starmap <- runUMAP(mini_starmap, dimensions_to_use = 1:8)
plotUMAP(gobject = mini_starmap,
         save_param = list(save_name = '3_c_UMAP'))

# 2D tSNE
mini_starmap <- runtSNE(mini_starmap, dimensions_to_use = 1:8)
plotTSNE(gobject = mini_starmap, save_param = list(save_name = '3_d_TSNE'))
```

## Clustering
```{r eval=TRUE}
## sNN network (default)
mini_starmap <- createNearestNetwork(gobject = mini_starmap, dimensions_to_use = 1:8, k = 25)
## Leiden clustering
mini_starmap <- doLeidenCluster(gobject = mini_starmap, resolution = 0.5, n_iterations = 1000)

plotUMAP(gobject = mini_starmap, cell_color = 'leiden_clus', show_NN_network = T, point_size = 2.5, save_param = list(save_name = '4_a_UMAP'))

# 2D umap + coordinates
spatDimPlot(gobject = mini_starmap, cell_color = 'leiden_clus',
            dim_point_size = 2, spat_point_size = 2.5,
            save_param = list(save_name = '4_b_spatdimplot'))
```

## Spatial Grids
```{r eval=TRUE}
mini_starmap <- createSpatialGrid(gobject = mini_starmap,
                                  sdimx_stepsize = 200,
                                  sdimy_stepsize = 200,
                                  sdimz_stepsize = 20,
                                  minimum_padding = 10)
showGiottoSpatGrids(mini_starmap)

# visualize grid
spatPlot2D(gobject = mini_starmap, show_grid = T, point_size = 1.5,
           save_param = list(save_name = '5_a_spatplot'))
```

## Spatial Networks
```{r eval=TRUE}
plotStatDelaunayNetwork(gobject = mini_starmap, maximum_distance = 200, 
                        method = 'delaunayn_geometry',
                        save_param = list(save_name = '6_a_delnetwork'))

mini_starmap = createSpatialNetwork(gobject = mini_starmap, minimum_k = 2, 
                                    maximum_distance_delaunay = 200, 
                                    method = 'Delaunay', 
                                    delaunay_method = 'delaunayn_geometry')
mini_starmap = createSpatialNetwork(gobject = mini_starmap, minimum_k = 2, 
                                    method = 'kNN', k = 10)
showGiottoSpatNetworks(mini_starmap)

# visualize the two different spatial networks  
spatPlot(gobject = mini_starmap, show_network = T,
         network_color = 'blue', spatial_network_name = 'Delaunay_network',
         point_size = 2.5, cell_color = 'leiden_clus',
         save_param = list(save_name = '6_b_spatplot'))

spatPlot(gobject = mini_starmap, show_network = T,
         network_color = 'blue', spatial_network_name = 'kNN_network',
         point_size = 2.5, cell_color = 'leiden_clus',
         save_param = list(save_name = '6_c_spatplot'))
```

## Spatial Genes
```{r eval=TRUE}
km_spatialgenes = binSpect(mini_starmap)
spatFeatPlot2D(mini_starmap, expression_values = 'scaled', 
             feats = km_spatialgenes[1:4]$feats,
             point_shape = 'border', point_border_stroke = 0.1,
             show_network = F, network_color = 'lightgrey', point_size = 2.5,
             cow_n_col = 2,
             save_param = list(save_name = '7_a_spatgeneplot'))

rank_spatialgenes = binSpect(mini_starmap, bin_method = 'rank')
spatFeatPlot2D(mini_starmap, expression_values = 'scaled', 
             feats = rank_spatialgenes[1:4]$feats,
             point_shape = 'border', point_border_stroke = 0.1,
             show_network = F, network_color = 'lightgrey', point_size = 2.5,
             cow_n_col = 2,
             save_param = list(save_name = '7_b_spatgeneplot'))
```

## Spatial Co-expression Patterns
```{r eval=TRUE}
# 1. calculate spatial correlation scores 
ext_spatial_genes = km_spatialgenes[1:20]$feats
spat_cor_netw_DT = detectSpatialCorFeats(mini_starmap,
                                         method = 'network', 
                                         spatial_network_name = 'Delaunay_network',
                                         subset_feats = ext_spatial_genes)

# 2. cluster correlation scores
spat_cor_netw_DT = clusterSpatialCorFeats(spat_cor_netw_DT, 
                                          name = 'spat_netw_clus', k = 6)
heatmSpatialCorFeats(mini_starmap, spatCorObject = spat_cor_netw_DT, 
                     use_clus_name = 'spat_netw_clus',
                     save_param = list(save_name = '8_a_heatmspatcor', units = 'in'))

netw_ranks = rankSpatialCorGroups(mini_starmap, 
                                  spatCorObject = spat_cor_netw_DT, 
                                  use_clus_name = 'spat_netw_clus',
                                  save_param = list(save_name = '8_b_rankcorgroup'))

top_netw_spat_cluster = showSpatialCorFeats(spat_cor_netw_DT, 
                                            use_clus_name = 'spat_netw_clus',
                                            selected_clusters = 6, 
                                            show_top_feats = 1)

cluster_genes_DT = showSpatialCorFeats(spat_cor_netw_DT, 
                                       use_clus_name = 'spat_netw_clus',
                                       show_top_feats = 1)
cluster_genes = cluster_genes_DT$clus; names(cluster_genes) = cluster_genes_DT$feat_ID

mini_starmap = createMetafeats(mini_starmap,
                               feat_clusters = cluster_genes,
                               name = 'cluster_metagene')
spatCellPlot(mini_starmap,
             spat_enr_names = 'cluster_metagene',
             cell_annotation_values = netw_ranks$clusters,
             point_size = 1.5, cow_n_col = 3,
             save_param = list(save_name = '8_c_spatcellplot'))
```

## 3D Slicing
```{r eval=TRUE}
delaunay_network_DT = mini_starmap@spatial_network$cell$Delaunay_network
delaunay_network_DT = delaunay_network_DT@networkDT

networkDT = delaunay_network_DT
mini_starmap = createCrossSection(mini_starmap,
                                  method="equation",
                                  equation=c(0,1,1,8),
                                  extend_ratio = 0.2,
                                  cell_distance_estimate_method = "mean",
                                  thickness_unit = "cell",
                                  slice_thickness = 2,
                                  mesh_grid_n = 20)

# show cross section
crossSection_obj = mini_starmap@spatial_network[["Delaunay_network"]][["crossSectionObjects"]][["cross_section"]]
insertCrossSectionSpatPlot3D(gobject = mini_starmap,
                             crossSection_obj = crossSection_obj,
                             cell_color = 'leiden_clus',
                             axis_scale = 'cube',
                             point_size = 2,
                             save_param = list(save_name = '9_a_insertcross'))

insertCrossSectionGenePlot3D(gobject = mini_starmap,
                             crossSection_obj = crossSection_obj,
                             expression_values = 'scaled',
                             axis_scale = "cube",
                             genes = "Slc17a7",
                             save_param = list(save_name = '9_b_insertcrossgene'))

# for cell annotation
crossSectionPlot(gobject = mini_starmap,
                 crossSection_obj = crossSection_obj,
                 point_size = 2, point_shape = "border",
                 cell_color = "leiden_clus",
                 save_param = list(save_name = '9_c_crossplot'))

crossSectionPlot3D(gobject = mini_starmap,
                   crossSection_obj = crossSection_obj,
                   point_size = 2, cell_color = "leiden_clus",
                   axis_scale = "cube",
                   save_param = list(save_name = '9_c_crossplot3D'))

# for gene expression
crossSectionGenePlot(gobject = mini_starmap,
                     crossSection_obj = crossSection_obj,
                     genes = "Slc17a7",
                     point_size = 2,
                     point_shape = "border",
                     cow_n_col = 1.5,
                     expression_values = 'scaled',
                     save_param = list(save_name = '9_d_crossgeneplot'))
```

## Session Info
```{r}
sessionInfo()
```
